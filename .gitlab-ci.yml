variables:
  GIT_STRATEGY: clone

workflow:
  rules:
    - if: $CI_COMMIT_BRANCH

stages:
  - test
  - publish

# Check black formatting of code

black:
  stage: test
  image: python:3.9-slim
  before_script:
    - pip install black
  script:
    - black --check .

# Build documentation

docs:
  stage: test
  image: python:3.9
  before_script:
    - pip install -r docs/requirements.txt
  script:
    - cd docs
    - make html
  artifacts:
    paths:
      - docs/build/html
    expire_in: 1 week

# Templates for publish jobs

.publish:
  stage: publish
  image: docker:20.10.7
  services:
    - docker:20.10.7-dind
  before_script:
    - apk add make git
    - echo $PASSWORD | docker login --username $USERNAME --password-stdin $REGISTRY
  script:
    - cd $SRCDIR
    - make build
    - make push

.publish-dev:
  extends: .publish
  variables:
    REGISTRY: $CI_REGISTRY
    USERNAME: $CI_REGISTRY_USER
    PASSWORD: $CI_REGISTRY_PASSWORD
    PREFIX: $CI_REGISTRY_IMAGE
    GITHASH: $CI_COMMIT_SHORT_SHA
  rules:
    - if: '$CI_COMMIT_BRANCH != $CI_DEFAULT_BRANCH'
      changes:
        - $SRCDIR/**/*

.publish-release:
  extends: .publish
  variables:
    REGISTRY: $CAR_OCI_REGISTRY_HOST
    USERNAME: $CAR_OCI_REGISTRY_USERNAME
    PASSWORD: $CAR_OCI_REGISTRY_PASSWORD
    PREFIX: $CAR_OCI_REGISTRY_HOST
    RELEASE: "true"
  rules:
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'
      changes:
        - $SRCDIR/**/*

# Publish jobs for each workflow

# batch_imaging

# publish-dev-batch-imaging:
#   extends: .publish-dev
#   variables:
#     SRCDIR: src/batch_imaging

# publish-release-batch-imaging:
#   extends: .publish-release
#   variables:
#     SRCDIR: src/batch_imaging

# delivery

# publish-dev-delivery:
#   extends: .publish-dev
#   variables:
#     SRCDIR: src/delivery

# publish-release-delivery:
#   extends: .publish-release
#   variables:
#     SRCDIR: src/delivery

# plasma_pipeline

publish-dev-plasma-pipeline:
  extends: .publish-dev
  variables:
    SRCDIR: src/plasma_pipeline

publish-release-plasma-pipeline:
  extends: .publish-release
  variables:
    SRCDIR: src/plasma_pipeline

# pss_receive

publish-dev-pss-receive:
  extends: .publish-dev
  variables:
    SRCDIR: src/pss_receive

publish-release-pss-receive:
  extends: .publish-release
  variables:
    SRCDIR: src/pss_receive

# test_batch

publish-dev-test-batch:
  extends: .publish-dev
  variables:
    SRCDIR: src/test_batch

publish-release-test-batch:
  extends: .publish-release
  variables:
    SRCDIR: src/test_batch

# test_daliuge

publish-dev-test-daliuge:
  extends: .publish-dev
  variables:
    SRCDIR: src/test_daliuge

publish-release-test-daliuge:
  extends: .publish-release
  variables:
    SRCDIR: src/test_daliuge

# test_dask

publish-dev-test-dask:
  extends: .publish-dev
  variables:
    SRCDIR: src/test_dask

publish-release-test-dask:
  extends: .publish-release
  variables:
    SRCDIR: src/test_dask

# test_realtime

publish-dev-test-realtime:
  extends: .publish-dev
  variables:
    SRCDIR: src/test_realtime

publish-release-test-realtime:
  extends: .publish-release
  variables:
    SRCDIR: src/test_realtime

# test_receive_addresses

publish-dev-test-receive-addresses:
  extends: .publish-dev
  variables:
    SRCDIR: src/test_receive_addresses

publish-release-test-receive-addresses:
  extends: .publish-release
  variables:
    SRCDIR: src/test_receive_addresses

# vis_receive

publish-dev-vis-receive:
  extends: .publish-dev
  variables:
    SRCDIR: src/vis_receive

publish-release-vis-receive:
  extends: .publish-release
  variables:
    SRCDIR: src/vis_receive

# Create Gitlab CI badges from CI metrics
# https://developer.skatelescope.org/en/latest/tools/continuousintegration.html#automated-collection-of-ci-health-metrics-as-part-of-the-ci-pipeline
include:
  - project: 'ska-telescope/templates-repository'
    file: 'gitlab-ci/includes/post_step.yml'
